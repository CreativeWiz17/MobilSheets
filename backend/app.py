import os
import subprocess
from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
from werkzeug.utils import secure_filename
from music21 import converter, stream, note
from PIL import Image, UnidentifiedImageError
import onnxruntime as ort

# Set up the Flask app
app = Flask(__name__)
CORS(app)

# Directories
UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'outputs'
DEFAULT_TEST_IMAGE = os.path.join(UPLOAD_FOLDER, 'testimage.png')
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

# Create upload/output directories if they don't exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# Allowed file extensions
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Home route
@app.route('/')
def home():
    return jsonify({
        'status': 'MobilSheets Backend is Running',
        'endpoints': {
            '/convert': 'POST an image file to convert to MIDI',
            '/test-convert': 'POST to generate a test MIDI file'
        }
    })

# Convert route
@app.route('/convert', methods=['POST'])
def convert():
    try:
        # Check if a file is uploaded
        if 'file' in request.files and request.files['file'].filename != '':
            file = request.files['file']
            if not allowed_file(file.filename):
                return jsonify({'error': 'Unsupported file type'}), 400

            filename = secure_filename(file.filename)
            filepath = os.path.join(UPLOAD_FOLDER, filename)
            file.save(filepath)

            # Validate image
            try:
                Image.open(filepath).verify()
            except UnidentifiedImageError:
                return jsonify({'error': 'Invalid image file'}), 400
        else:
            if not os.path.exists(DEFAULT_TEST_IMAGE):
                return jsonify({'error': 'No file uploaded and test image not found'}), 400
            filepath = DEFAULT_TEST_IMAGE

        # Run Oemer with CPU-only setting
        env = os.environ.copy()
        env["ORT_DISABLE_GPU"] = "1"  # Disable GPU
        result = subprocess.run(
            ["oemer", filepath, "-o", OUTPUT_FOLDER],
            capture_output=True,
            text=True,
            env=env,
            timeout=600  # 10 minutes
        )

        if result.returncode != 0:
            return jsonify({'error': f'Processing failed: {result.stderr}'}), 500

        # Locate the generated MusicXML file
        musicxml_path = next(
            (os.path.join(OUTPUT_FOLDER, f) for f in os.listdir(OUTPUT_FOLDER) if f.endswith(".musicxml")),
            None
        )

        if not musicxml_path:
            return jsonify({'error': 'No MusicXML file generated by Oemer'}), 500

        # Convert MusicXML to MIDI using Music21
        score = converter.parse(musicxml_path)
        midi_path = musicxml_path.replace(".musicxml", ".mid")
        score.write('midi', fp=midi_path)

        return send_file(midi_path, as_attachment=True)

    except subprocess.TimeoutExpired:
        return jsonify({'error': 'Oemer processing timed out after 10 minutes'}), 500
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# Test Convert route (create a simple MIDI for testing)
@app.route('/test-convert', methods=['POST'])
def test_convert():
    try:
        s = stream.Stream()
        s.append(note.Note("C4", quarterLength=1))
        s.append(note.Note("E4", quarterLength=1))
        s.append(note.Note("G4", quarterLength=1))
        midi_path = os.path.join(UPLOAD_FOLDER, "test.mid")
        s.write('midi', fp=midi_path)
        return send_file(midi_path, as_attachment=True)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# Run the app
if __name__ == '__main__':
    app.run(debug=True)
